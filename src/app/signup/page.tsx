'use client';

import { useState, FormEvent } from 'react';
import { auth, firestore } from '../../firebase';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import Link from 'next/link';

const BRANCH_OPTIONS = ["ME", "EEE", "ECE", "SF", "CS", "IT", "CE"];
const SEMESTER_OPTIONS = ["1", "2", "3", "4", "5", "6", "7", "8"];

export default function SignUpPage() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    branch: 'ME',
    semester: '1',
    bloodGroup: '',
    mobileNumber: '',
    guardianNumber: '',
    photoUrl: '',
    joinYear: new Date().getFullYear().toString(),
  });
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSignUp = async (e: FormEvent) => {
    e.preventDefault();
    setError('');
    setMessage('');
    if (formData.password !== formData.confirmPassword) {
      setError("Passwords do not match.");
      return;
    }
    if (formData.password.length < 6) {
        setError("Password must be at least 6 characters long.");
        return;
    }
    setIsSubmitting(true);

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, formData.email, formData.password);
      const user = userCredential.user;

      // Create user doc without saeId, set status to pending
      await setDoc(doc(firestore, 'users', user.uid), {
        name: formData.name,
        saeId: null, // Will be generated by admin
        email: formData.email,
        branch: formData.branch,
        club: 'SAE CUSAT',
        semester: formData.semester,
        bloodGroup: formData.bloodGroup,
        mobileNumber: formData.mobileNumber,
        guardianNumber: formData.guardianNumber,
        joinYear: formData.joinYear.slice(-2), // Store as '25' for 2025
        photoUrl: formData.photoUrl || `https://i.pravatar.cc/150?u=${formData.email}`,
        permissionRole: 'student',
        displayTitle: 'Member',
        isCheckedIn: false,
        accountStatus: 'pending',
      });

      setMessage("Registration successful! Your account is now awaiting approval from an admin. You will be able to log in once your account is approved.");
      
    } catch (err: any) {
      console.error("Sign up error:", err);
      if (err.code === 'auth/email-already-in-use') {
        setError("This email address is already registered.");
      } else {
        setError(err.message || "An error occurred during sign-up.");
      }
    }
    setIsSubmitting(false);
  };

  return (
    <main className="flex items-center justify-center min-h-screen bg-gray-100 p-4">
      <div className="w-full max-w-2xl p-8 space-y-8 bg-white rounded-lg shadow-md">
        <div className="text-center">
          <h2 className="text-3xl font-extrabold text-gray-900">New Member Registration</h2>
          <p className="mt-2 text-sm text-gray-600">Your SAE ID will be assigned after admin approval.</p>
        </div>

        {message ? (
          <div className="p-4 text-center text-green-800 bg-green-100 rounded-md">
            <p className="font-semibold">{message}</p>
            <Link href="/" className="mt-4 inline-block font-bold text-indigo-600 hover:text-indigo-500">
              Return to Login Page
            </Link>
          </div>
        ) : (
          <form className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6" onSubmit={handleSignUp}>
            <input name="name" type="text" placeholder="Full Name" required onChange={handleChange} className="input-style" />
            <input name="email" type="email" placeholder="Email Address" required onChange={handleChange} className="input-style md:col-span-2" />
            <input name="password" type="password" placeholder="Password (min. 6 characters)" required onChange={handleChange} className="input-style" />
            <input name="confirmPassword" type="password" placeholder="Confirm Password" required onChange={handleChange} className="input-style" />
            
            <select name="branch" value={formData.branch} required onChange={handleChange} className="input-style">
              {BRANCH_OPTIONS.map(branch => <option key={branch} value={branch}>{branch}</option>)}
            </select>
            <select name="semester" value={formData.semester} required onChange={handleChange} className="input-style">
              {SEMESTER_OPTIONS.map(sem => <option key={sem} value={sem}>Semester {sem}</option>)}
            </select>
            
            <input name="joinYear" type="number" placeholder="Year of Joining (e.g., 2025)" required onChange={handleChange} value={formData.joinYear} className="input-style" />
            <input name="mobileNumber" type="tel" placeholder="Mobile Number" required onChange={handleChange} className="input-style" />
            <input name="guardianNumber" type="tel" placeholder="Guardian's Number" required onChange={handleChange} className="input-style" />
            <input name="bloodGroup" type="text" placeholder="Blood Group (e.g., O+)" required onChange={handleChange} className="input-style" />
            <input name="photoUrl" type="url" placeholder="Photo URL (Optional)" onChange={handleChange} className="input-style md:col-span-2" />

            {error && <p className="text-sm text-red-600 md:col-span-2 text-center">{error}</p>}

            <div className="md:col-span-2">
              <button type="submit" disabled={isSubmitting} className="w-full py-3 px-4 font-semibold text-white bg-indigo-600 rounded-md hover:bg-indigo-700 disabled:bg-gray-400">
                {isSubmitting ? 'Registering...' : 'Submit for Approval'}
              </button>
            </div>
          </form>
        )}
      </div>
      <style jsx global>{`
        .input-style {
          position: relative; box-sizing: border-box; height: auto; padding: 12px; font-size: 16px; width: 100%;
          border: 1px solid #D1D5DB; border-radius: 0.375rem; appearance: none;
        }
        .input-style:focus {
          outline: 2px solid transparent; outline-offset: 2px; border-color: #4F46E5; box-shadow: 0 0 0 2px #4F46E5;
        }
      `}</style>
    </main>
  );
}

